import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

community = pd.read_csv('communities.csv')

Suburbs = community[community['Community Name'].str.endswith('(Suburb)')].copy()

# keep the suburbs' name same in the two csv file
Suburbs['Community Name'] = Suburbs['Community Name'].str.replace(' (Suburb)', '', regex = False).str.upper()

# deal with the data which is not a number
Suburbs['Equivalent household income <$600/week, %'] = Suburbs['Equivalent household income <$600/week, %'].replace("<5", '5') 

# keep one decimal place
Suburbs['Equivalent household income <$600/week, %'] = Suburbs['Equivalent household income <$600/week, %'].apply(lambda x: float(x)).round(1)
Suburbs['Holds degree or higher, %'] = Suburbs['Holds degree or higher, %'].apply(lambda x: float(x)).round(1)


house_price = pd.read_csv('Houses-by-suburb.csv')

# delete rows which house price in 2013 is null
house_price = house_price[house_price['2013'] != '-']

house_price['2013'] = pd.to_numeric(house_price['2013'], errors='coerce')
house_prices_2013 = house_price[['Locality', '2013']].dropna()

sorted_prices_2013 = house_prices_2013.sort_values(by = '2013', ascending = True).reset_index(drop = True)


# merge together
merged_data = pd.merge(sorted_prices_2013, Suburbs, left_on = 'Locality', right_on = 'Community Name', how = 'inner')
the_merged_data = merged_data[['Locality', '2013', 'Equivalent household income <$600/week, %', 'Holds degree or higher, %']]

final_merged_data = the_merged_data.copy()

total_rows = len(final_merged_data)
low_end = total_rows // 4
high_start = 3 * total_rows // 4

# low is the first 1/4
# medium is from 1/4 to 3/4
# high is the last 1/4
final_merged_data.loc[:low_end, 'Price Category'] = 'Low'
final_merged_data.loc[low_end:high_start, 'Price Category'] = 'Medium'
final_merged_data.loc[high_start:, 'Price Category'] = 'High'

final_merged_data
